







free c: channel.

type host.
type passwd.
type nonce.
type G.
type exponent.
type key.


fun nonce_to_bitstring(nonce): bitstring [data, typeConverter].
fun G_to_key(G): key [data, typeConverter].
fun G_to_bitstring(G):bitstring [data, typeConverter].



const g: G.
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).



fun enc(bitstring, key): bitstring.
fun dec(bitstring, key): bitstring.
equation forall x: bitstring, y: key; enc(dec(x,y),y) = x.



fun h(passwd):key.



fun F(passwd, key): bitstring.



reduc forall x: passwd, y: key; T(h(x), F(x,y), y) = true.



const A, B: host.



free PAB, PAA, PBB: passwd [private].
weaksecret PAB.
weaksecret PAA.
weaksecret PBB.



let processA(hostA: host, hostX: host, P: passwd) = 
	new RA: exponent;
	out(c, (hostA, enc(G_to_bitstring(exp(g, RA)), h(P))));
	in(c, (m1: bitstring, m2: bitstring));
	let G_to_bitstring(gRB) = dec(m1, h(P)) in
	let K = G_to_key(exp(gRB, RA)) in
	let nonce_to_bitstring(challengeB) = dec(m2, K) in
	new challengeA: nonce;
	out(c, enc((challengeA, challengeB), K));
	in(c, m3: bitstring);
	if nonce_to_bitstring(challengeA) = dec(m3, K) then
	out(c, enc(F(P,K), K)).



let processB(hostB: host, hostX: host, P: passwd) =
	in(c, (=hostX, m: bitstring));
	let G_to_bitstring(gRA) = dec(m, h(P)) in 
	new RB: exponent;
	let K = G_to_key(exp(gRA, RB)) in
	new challengeB: nonce;
	out(c, (enc(G_to_bitstring(exp(g, RB)), h(P)), enc(nonce_to_bitstring(challengeB), K)));
	in(c, m4: bitstring);
	let (challengeA: nonce, =challengeB) = dec(m4, K) in
	out(c, enc(nonce_to_bitstring(challengeA), K));
	in(c, m5: bitstring);
	let fr = dec(m5, K) in
	if T(h(P), fr, K) = true then
	0.



process 
	(!processA(A, A, PAA)) |
	(!processB(A, A, PAA)) |
	(!processA(B, B, PBB)) |
	(!processB(B, B, PBB)) |
	(!processA(A, B, PAB)) |
	(!processB(A, B, PAB)) |
	(!processA(B, A, PAB)) |
	(!processB(B, A, PAB))



