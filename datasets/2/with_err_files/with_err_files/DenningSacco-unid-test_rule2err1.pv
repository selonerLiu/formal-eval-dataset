




free c: channel.

type host.
type key.
type pkey.
type skey.
type spkey.
type sskey.



fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)),y) = x.



fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, k: sskey; getmess(sign(m,k)) = m.
reduc forall m: bitstring, k: sskey; checksign(sign(m,k), spk(k)) = m.



fun sencrypt(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; sdecrypt(sencrypt(x,y),y) = x.



not attacker(new skA).
not attacker(new skB).
not attacker(new skS).



free A, B: host.


table sign_keys(host, spkey).



free secretB: bitstring [private].
query attacker(new secretA[h2 = B]).
query x: pkey; attacker(new secretA[cert2 = sign((B, x), new skS)]);
      attacker(secretB).

event endBparam(host,host).
event beginBparam(host,host).
event endBkey(host, host, key).
event beginBkey(host, host, key).

query x: host, y: host; inj-event(endBparam(x,y)) ==> inj-event(beginBparam(x,y)).
query x: host, y: host, z: key; inj-event(endBkey(x,y,z)) ==> inj-event(beginBkey(x,y,z)).



let processInitiator(pkS: spkey, xA: host, skA: sskey, pkA: spkey) =
	in(c, (cert1: bitstring, cert2: bitstring));
	let (=xA, =pkA) = checksign(cert1, pkS) in
	let (h2: host, pk2: pkey) = checksign(cert2, pkS) in
	event beginBparam(xA, h2);
	new k: key;
	event beginBkey(xA, h2, k);
	out(c, (cert1, cert2, encrypt(sign((A, h2, k), skA), pk2)));
	new secretA: bitstring;
	out(c, sencrypt(secretA, k)).



let processResponder(pkS: spkey,  xB: host, skB: skey, pkB: pkey) =
	in(c, (cert1: bitstring, cert2: bitstring, km: bitstring));
	let (h1: host, pk1: spkey) = checksign(cert1, pkS) in
	let (=xB, =pkB) = checksign(cert2, pkS) in
	let ks = decrypt(km,skB) in
	let (=h1, =xB, k:key) = checksign(ks, pk1) in
	if h1 = A then
	event endBparam(h1, xB);
	event endBkey(h1, xB, k);
	out(c, sencrypt(secretB, k)).



let processS(skS: sskey) =
	in(c, (h1: host,h2: host));
	get sign_keys(=h1, pk1) in
	get enc_keys(=h2, pk2) in
	out(c, (sign((h1, pk1), skS), sign((h2, pk2), skS))).



let process_signK =
        in(c, (h: host, pk: spkey));
	if h <> A then insert sign_keys(h, pk).



let process_encK =
        in(c, (h: host, pk: pkey));
	if h <> B then insert enc_keys(h, pk).



process new skA: sskey; 
	let pkA = spk(skA) in
        out(c, pkA);
	insert sign_keys(A, pkA);
        new skB: skey; 
	let pkB = pk(skB) in
        out(c, pkB);
	insert enc_keys(B, pkB);
	new skS: sskey; 
	let pkS = spk(skS) in
	out(c, pkS);
	((!processInitiator(pkS, A, skA, pkA)) | 
	 (!processResponder(pkS, B, skB, pkB)) |
	 (!processS(skS)) |
	 (!process_signK) | (!process_encK))


