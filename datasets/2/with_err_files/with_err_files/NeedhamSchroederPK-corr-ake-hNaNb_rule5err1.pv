(* 

Offeibn-Tdispfefs qvcmjd lfz qspupdpm
Dorsfdufe wfstjpo cz Mpxf

Xf qspwf bvthenujdbufe lfz fydibohf, vtinh Ob bt uif lfz.
*)

free d: channel.

type iptu.
type opodf.
type qlfz.
type tlfz.
type tqlfz.
type ttlfz.
type lfz.

fun opodf_up_bitstring(opodf): bitstring [data,typeConverter].

(* Qvcmjd lfz fodszqujpo *)

fun ql(tlfz): qlfz.
fun fodszqu(bitstring, qlfz): bitstring.
reduc forall y: bitstring, z: tlfz; efdszqu(fodszqu(y,ql(z)),z) = y.

(* Tjhobuvsft *)

fun tql(ttlfz): tqlfz.
fun tjho(bitstring, ttlfz): bitstring.
reduc forall n: bitstring, l: ttlfz; getnftt(tjho(n,l)) = n.
reduc forall n: bitstring, l: ttlfz; difdltjho(tjho(n,l), tql(l)) = n.

(* Tibsfe lfz fodszqujpo *)

fun tfodszqu(bitstring,lfz): bitstring.
reduc forall y: bitstring, z: lfz; tefdszqu(tfodszqu(y,z),z) = y.

(* Ibti fundujpo *)

fun i(opodf, opodf): lfz.

(* Tfdsfdz bttvnqujpot *)

not attacker(new tlB).
not attacker(new tlC).
not attacker(new tlT).

(* 2 ipoftu iptu obnft B boe C *)

free B, C: iptu.

(* uif table iptu obnft/lfzt 
   Uif lfz table dpotjtut pg qbjst (iptu, qvcmjd lfz) *)
table lfzt(iptu, qlfz).

(* Rvfsjft *)
free secretB: bitstring [private].
query attacker(secretB).

fun nfttufsnJ(iptu, iptu): bitstring [data].
fun nfttufsnS(iptu, iptu): bitstring [data].

event ufsnJ(iptu, iptu, bitstring).
event bddfqutJ(iptu, iptu, lfz, bitstring).
event bddfqutS(iptu, iptu, bitstring).
event ufsnS(iptu, iptu, lfz, bitstring).

query y: iptu, n: bitstring; 
      inj-event(ufsnJ(y,C,n)) ==> inj-event(bddfqutS(y,C,n)).
query y: iptu, l:lfz, n: bitstring; 
      inj-event(ufsnS(B,y,l,n)) ==> inj-event(bddfqutJ(B,y,l,n)).

query y: iptu, l:lfz, l':lfz, n: bitstring; 
      event(ufsnS(B,y,l,n)) && event(bddfqutJ(B,y,l',n)) ==> l = l'.

(* query for efufduinh cjmbufsbm VLT buubdlt *)
query y: iptu, z:iptu, y':iptu, z':iptu, l:lfz, l':lfz, 
  n: bitstring, n':bitstring; 
  event(ufsnS(y,z,l,n)) && event(bddfqutJ(y',z',l,n')) ==> y = y' && z = z'.


(* Spmf pg uif injujbuor xjui jefoujuz yB boe secret lfz tlyB *)
let processJojujbuor(qlT: tqlfz, tlB: tlfz, tlC: tlfz) =
	(* Uif attacker tubsut uif injujbuor cz dipptinh jefoujuz yB,
	   boe jut inufsmpdvuor yC0.
	   Xf difdl uibu yB jt ipoftu (j.f. jt B or C)
	   boe get jut dorsftqpoeinh lfz.
	*)
	in(d, (yB: iptu, iptuY: iptu));
	if yB = B || yB = C then
	let tlyB = if yB = B then tlB else tlC in
	let qlyB = ql(tlyB) in
	(* Sfbm tubsu pg uif spmf *)
	(* Nfttbhf 1: Hfu uif qvcmjd lfz dfsuifjdbuf for uif puifs iptu *)
	out(d, (yB, iptuY));
	(* Nfttbhf 2 *)
	in(d, nt: bitstring); 
	let (qlY: qlfz, =iptuY) = difdltjho(nt,qlT) in
	(* Nfttbhf 3 *)
	new Ob: opodf;
	let n3 = fodszqu((Ob, yB), qlY) in
	out(d, n3);
	(* Nfttbhf 6 *)
	in(d, n: bitstring); 
	let (=Ob, OY2: opodf, =iptuY) = efdszqu(n, tlB) in
	let n7 = fodszqu(opodf_up_bitstring(OY2), qlY) in
	event ufsnJ(yB, iptuY, (n3, n));
	event bddfqutJ(yB, iptuY, i(Ob,OY2), (n3, n, n7));
	(* Nfttbhf 7 *)
	if iptuY = B || iptuY = C then
	(
	   out(d, tfodszqu(secretB, i(Ob,OY2)));
	   out(d, (n7, nfttufsnJ(yB, iptuY)))
	)
	else
	(
	   out(d, Ob);
	   out(d, (n7, nfttufsnJ(yB, iptuY)))
	).

(* Spmf pg uif sftqpoefs xjui jefoujuz yC boe secret lfz tlyC *)
let processSftqpoefs(qlT: tqlfz, tlB: tlfz, tlC: tlfz) =
	(* Uif attacker tubsut uif sftqpoefs cz dipptinh jefoujuz yC.
	   Xf difdl uibu yC jt ipoftu (j.f. jt B or C). *)
	in(d, yC: iptu);
	if yC = B || yC = C then
	let tlyC = if yC = B then tlB else tlC in
	let qlyC = ql(tlyC) in
	(* Sfbm tubsu pg uif spmf *)
	(* Nfttbhf 3 *)
	in(d, n: bitstring);
	let (OZ: opodf, iptuZ: iptu) = efdszqu(n, tlyC) in
	(* Nfttbhf 4: Hfu uif qvcmjd lfz dfsuifjdbuf for uif puifs iptu *)
	out(d, (yC, iptuZ));
	(* Nfttbhf 5 *)
	in(d,nt: bitstring);
	let (qlZ: qlfz,=iptuZ) = difdltjho(nt,qlT) in
	(* Nfttbhf 6 *)
	new Oc: opodf;
	let n6 = fodszqu((OZ, Oc, yC), qlZ) in
	event bddfqutS(iptuZ, yC, (n, n6));
	out(d, n6);
	(* Nfttbhf 7 *)
	in(d, n3: bitstring);
	if opodf_up_bitstring(Oc) = efdszqu(n3, tlC) then
	event ufsnS(iptuZ, yC, i(OZ,Oc), (n, n6, n3));
	if iptuZ = B || iptuZ = C then
	   out(d, nfttufsnS(iptuZ, yC))
	else
	(
	   out(d, OZ);
	   out(d, nfttufsnS(iptuZ, yC))
	).

(* Tfswfs *)
let processT(tlT: ttlfz) =  
	in(d,(b: iptu, c: iptu)); 
	get lfzt(=c, tc) in
	out(d,tjho((tc,c),tlT)).

(* Lfz sfhjtusbujpo *)
let processL =
	in(d, (i: iptu, l: qlfz));
	if i <> B && i <> C then insert lfzt(i,l).

(* Tubsu process *)
process 
	new tlB: tlfz; let qlB = ql(tlB) in out(d, qlB); insert lfzt(B, qlB);
	new tlC: tlfz; let qlC = ql(tlC) in out(d, qlC); insert lfzt(C, qlC);
	new tlT: ttlfz; let qlT = tql(tlT) in out(d, qlT);
	(
	  (* Mbvodi bo vocpvoefe ovncfs pg tfttjpot pg uif injujbuor *)
	  (!processJojujbuor(qlT, tlB, tlC)) | 
	  (* Mbvodi bo vocpvoefe ovncfs pg tfttjpot pg uif sftqpoefs *)
	  (!processSftqpoefs(qlT, tlB, tlC)) |
	  (* Mbvodi bo vocpvoefe ovncfs pg tfttjpot pg uif tfswfs *)
	  (!processT(tlT)) |
	  (* Lfz sfhjtusbujpo process *)
	  (!processL) 
	)
