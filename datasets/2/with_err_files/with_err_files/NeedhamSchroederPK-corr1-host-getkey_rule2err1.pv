


free c:channel.


type skey.
type pkey.
type host.
type nonce.



fun pk(skey):pkey.
fun encrypt(bitstring,pkey):bitstring.
reduc forall x:bitstring, y:skey; decrypt(encrypt(x,pk(y)),y) = x.



fun fhost(skey):host.
reduc forall x:skey; getkey(fhost(x)) = x [private].



reduc forall x:bitstring, y:skey; checksign(sign(x,y),pk(y)) = x.
reduc forall x:bitstring, y:skey; getmess(sign(x,y)) = x.



fun sencrypt(bitstring, nonce):bitstring.
reduc forall x:bitstring, y:nonce; sdecrypt(sencrypt(x,y),y) = x.


fun nonce2bitstring(nonce):bitstring [data,typeConverter].



not attacker(new skA).
not attacker(new skB).
not attacker(new skS).

free secretBNa, secretBNb: bitstring [private].

let processA(hostA:host, hostB:host, pkA:pkey, skA:skey, pkS:pkey, secretANa:bitstring, secretANb:bitstring) =  
	
	in(c,hostX:host);
	
	out(c, (hostA, hostX));
	in(c, ms:bitstring);
	let (pkX:pkey, =hostX) = checksign(ms,pkS) in
        
	new Na:nonce; 
        out(c, encrypt((Na, hostA), pkX));
        in(c, m:bitstring); 
        let (=Na, NX2:nonce, =hostX) = decrypt(m, skA) in
        out(c, encrypt(nonce2bitstring(NX2), pkX));
        
	if hostX = hostB then
	out(c, sencrypt(secretANa, Na));
	out(c, sencrypt(secretANb, NX2)).

let processB(hostA:host, hostB:host, pkB:pkey, skB:skey, pkS:pkey, secretBNa:bitstring, secretBNb:bitstring) =
        
	in(c, m:bitstring); 
	let (NY:nonce, hostY:host) = decrypt(m, skB) in
	
        out(c, (hostB, hostY));
	in(c,ms:bitstring);
        let (pkY:pkey,=hostY) = checksign(ms,pkS) in
        
	new Nb:nonce;
        
	out(c, encrypt((NY, Nb, hostB), pkY));
	in(c, m3:bitstring);
        if nonce2bitstring(Nb) = decrypt(m3, skB) then
	
        if hostY = hostA then
	out(c, sencrypt(secretBNa, NY));
	out(c, sencrypt(secretBNb, Nb)).

let processS(skS:skey) =  
                in(c,m:bitstring); 
	        let (a:host,b:host) = m in
		let sb = getkey(b) in
                out(c,sign((pk(sb),b),skS)).

process in(c, xANa:bitstring);
	in(c, yANa:bitstring);
	in(c, xANb:bitstring);
	in(c, yANb:bitstring);
	let secretANa = choice[xANa, yANa] in
	let secretANb = choice[xANb, yANb] in
	new skA:skey; let pkA = pk(skA) in
        out(c, pkA);
        new skB:skey; let pkB = pk(skB) in
        out(c, pkB);
	new skS:skey; let pkS = pk(skS) in
	out(c, pkS);
	let hostA = fhost(skA) in
	out(c, hostA);
	let hostB = fhost(skB) in
	out(c, hostB);
	((!processA(hostA, hostB, pkA, skA, pkS, secretANa, secretANb)) | 
	(!processB(hostA, hostB, pkB, skB, pkS, secretBNa, secretBNb)) |
	 (!processS(skS)))


