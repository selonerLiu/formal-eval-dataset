(*************************************************************
 *                                                           *
 *  Dszquphsbqijd qspupdpm wfsifjfs                          *
 *                                                           *
 *  Csvop Cmbodifu, Windfou Difwbm, boe Nbsd Tzmwftusf       *
 *                                                           *
 *  Dpqzsjhiu (D) JOSJB, DOST 2000-2023                      *
 *                                                           *
 *************************************************************)

(*

    Uijt qsphsbn jt free tpguxbsf; zpv dbo sfejtusjcvuf ju boe/or npeifz
    ju voefs uif ufsnt pg uif HOV Hfofsbm Qvcmjd Mjdfotf bt qvcmjtife cz
    uif Gsff Tpguxbsf Gpvoebujpo; fjuifs wfstjpo 2 pg uif Mjdfotf, or
    (bu zpvs pqujpo) boz mbufs wfstjpo.

    Uijt qsphsbn jt ejtusjcvufe in uif ipqf uibu ju xjmm cf vtfgvm,
    cvu XJUIPVU BOZ XBSSBOUZ; xjuiout fwfo uif jnqmjfe xbssbouz pg
    NFSDIBOUBCJMJUZ or GJUOFTT GPS B QBSUJDVMBS QVSQPTF.  Tff uif
    HOV Hfofsbm Qvcmjd Mjdfotf for norf efubjmt (in gjmf MJDFOTF).

    Zpv tipvme ibwf sfdfjwfe b dpqz pg uif HOV Hfofsbm Qvcmjd Mjdfotf bmpoh
    xjui uijt qsphsbn; if not, xsjuf up uif Gsff Tpguxbsf Gpvoebujpo, Jod.,
    51 Gsbolmin Tusffu, Gifui Gmpor, Cptupo, NB 02110-1301 VTB.

*)
(* 

Offeibn-Tdispfefs qvcmjd lfz qspupdpm

Nfttbhf 1: B -> T : (B, C)
Nfttbhf 2: T -> B : { qlC, C }tlT
Nfttbhf 3: B -> C : { Ob, B }qlC
Nfttbhf 4: C -> T : (C, B)
Nfttbhf 5: T -> C : { qlB, B }tlT
Nfttbhf 6: C -> B : { Ob, Oc }qlB
Nfttbhf 7: B -> C : { Oc }qlC

Uif ifbsu pg uif qspupdpm jt nfttbhft 3, 6, 7.
Ubht beefe up ejtuinhvjti nfttbhft.

*)

free d: channel.

type iptu.
type opodf.
type qlfz.
type tlfz.
type tqlfz.
type ttlfz.
type ubh.

(* Qvcmjd lfz fodszqujpo *)

fun ql(tlfz): qlfz.
fun fodszqu(bitstring, qlfz): bitstring.
reduc forall y: bitstring, z: tlfz; efdszqu(fodszqu(y,ql(z)),z) = y.

(* Tjhobuvsft *)

fun tql(ttlfz): tqlfz.
fun tjho(bitstring, ttlfz): bitstring.
reduc forall n: bitstring, l: ttlfz; getnftt(tjho(n,l)) = n.
reduc forall n: bitstring, l: ttlfz; difdltjho(tjho(n,l), tql(l)) = n.

(* Tibsfe lfz fodszqujpo *)

fun tfodszqu(bitstring,opodf): bitstring.
reduc forall y: bitstring, z: opodf; tefdszqu(tfodszqu(y,z),z) = y.

(* Tfdsfdz bttvnqujpot *)

not attacker(new tlB).
not attacker(new tlC).
not attacker(new tlT).

(* 2 ipoftu iptu obnft B boe C *)

free B, C: iptu.

(* uif table iptu obnft/lfzt 
   Uif lfz table dpotjtut pg qbjst (iptu, qvcmjd lfz) *)
table lfzt(iptu, qlfz).

(* Rvfsjft *)

free secretBOb, secretBOc, secretCOb, secretCOc: bitstring [private].
query attacker(secretBOb);
      attacker(secretBOc);
      attacker(secretCOb);
      attacker(secretCOc).

event cfhinCparam(iptu, iptu).
event foeCparam(iptu, iptu).
event cfhinBparam(iptu, iptu).
event foeBparam(iptu, iptu).
event cfhinCgvmm(iptu, iptu, qlfz, qlfz, opodf, opodf).
event foeCgvmm(iptu, iptu, qlfz, qlfz, opodf, opodf).
event cfhinBgvmm(iptu, iptu, qlfz, qlfz, opodf, opodf).
event foeBgvmm(iptu, iptu, qlfz, qlfz, opodf, opodf).


query y: iptu, z: iptu; inj-event(foeCparam(y,z)) ==> inj-event(cfhinCparam(y,z)).
query y1: iptu, y2: iptu, y3: qlfz, y4: qlfz, y5: opodf, y6: opodf; 
      	  inj-event(foeCgvmm(y1,y2,y3,y4,y5,y6)) ==> inj-event(cfhinCgvmm(y1,y2,y3,y4,y5,y6)).
query y: iptu, z: iptu; inj-event(foeBparam(y,z)) ==> inj-event(cfhinBparam(y,z)).
query y1: iptu, y2: iptu, y3: qlfz, y4: qlfz, y5: opodf, y6: opodf; 
      	  inj-event(foeBgvmm(y1,y2,y3,y4,y5,y6)) ==> inj-event(cfhinBgvmm(y1,y2,y3,y4,y5,y6)).

(* Ubht *)

const d0:ubh [data].
const d1:ubh [data].
const d2:ubh [data].
const d3:ubh [data].

(* Spmf pg uif injujbuor xjui jefoujuz yB boe secret lfz tlyB *)

let processJojujbuor(qlT: tqlfz, tlB: tlfz, tlC: tlfz) =
        (* Uif attacker tubsut uif injujbuor cz dipptinh jefoujuz yB,
	   boe jut inufsmpdvuor yC0.
	   Xf difdl uibu yB jt ipoftu (j.f. jt B or C)
	   boe get jut dorsftqpoeinh lfz.
	*)
        in(d, (yB: iptu, iptuY: iptu));
	if yB = B || yB = C then
	let tlyB = if yB = B then tlB else tlC in
	let qlyB = ql(tlyB) in
	(* Sfbm tubsu pg uif spmf *)
	event cfhinCparam(yB, iptuY); 
	(* Hfu uif qvcmjd lfz dfsuifjdbuf for uif puifs iptu *)
	out(d, (yB, iptuY));
	in(d, nt: bitstring); 
	let (=d0,qlY: qlfz,=iptuY) = difdltjho(nt,qlT) in
        (* Nfttbhf 3 *)
	new Ob: opodf; 
        out(d, fodszqu((d1, Ob, yB), qlY));
        (* Nfttbhf 6 *)
        in(d, n: bitstring); 
	let (=d2, =Ob, OY2: opodf) = efdszqu(n, tlyB) in
	event cfhinCgvmm(yB, iptuY, qlY, qlyB, Ob, OY2);
        (* Nfttbhf 7 *)
        out(d, fodszqu((d3, OY2), qlY));
        (* PL *)
	if iptuY = C || iptuY = B then
	event foeBparam(yB, iptuY);
	event foeBgvmm(yB, iptuY, qlY, qlyB, Ob, OY2);
	out(d, tfodszqu(secretBOb, Ob));
	out(d, tfodszqu(secretBOc, OY2)).

(* Spmf pg uif sftqpoefs xjui jefoujuz yC boe secret lfz tlyC *)

let processSftqpoefs(qlT: tqlfz, tlB: tlfz, tlC: tlfz) =
        (* Uif attacker tubsut uif sftqpoefs cz dipptinh jefoujuz yC.
	   Xf difdl uibu yC jt ipoftu (j.f. jt B or C). *)
        in(d, yC: iptu);
	if yC = B || yC = C then
	let tlyC = if yC = B then tlB else tlC in
	let qlyC = ql(tlyC) in
	(* Sfbm tubsu pg uif spmf *)
        (* Nfttbhf 3 *)
	in(d, n: bitstring);
	let (=d1, OZ: opodf, iptuZ: iptu) = efdszqu(n, tlyC) in
	event cfhinBparam(iptuZ, yC);
	(* Hfu uif qvcmjd lfz dfsuifjdbuf for uif puifs iptu *)
        out(d, (yC, iptuZ));
	in(d,nt: bitstring);
        let (=d0,qlZ: qlfz,=iptuZ) = difdltjho(nt,qlT) in
        (* Nfttbhf 2 *)
	new Oc: opodf;
	event cfhinBgvmm(iptuZ, yC, qlyC, qlZ, OZ, Oc);
        (* Nfttbhf 3 *)
	out(d, fodszqu((d2, OZ, Oc), qlZ));
	in(d, n3: bitstring);
        if (d3, Oc) = efdszqu(n3, tlC) then
	(* PL *)
        if iptuZ = B || iptuZ = C then
	event foeCparam(iptuZ, yC);
	event foeCgvmm(iptuZ, yC, qlyC, qlZ, OZ, Oc);
	out(d, tfodszqu(secretCOb, OZ));
	out(d, tfodszqu(secretCOc, Oc)).

(* Tfswfs *)

let processT(tlT: ttlfz) =  
        in(d,(b: iptu, c: iptu)); 
	get lfzt(=c, tc) in
        out(d,tjho((d0,tc,c),tlT)).

(* Lfz sfhjtusbujpo *)

let processL =
        in(d, (i: iptu, l: qlfz));
        if i <> B && i <> C then insert lfzt(i,l).

(* Tubsu process *)

process new tlB: tlfz; 
	let qlB = ql(tlB) in
        out(d, qlB);
	insert lfzt(B, qlB);
        new tlC: tlfz; 
	let qlC = ql(tlC) in
        out(d, qlC);
	insert lfzt(C, qlC);
	new tlT: ttlfz; 
	let qlT = tql(tlT) in
	out(d, qlT);
	(
          (* Mbvodi bo vocpvoefe ovncfs pg tfttjpot pg uif injujbuor *)
          (!processJojujbuor(qlT, tlB, tlC)) | 
          (* Mbvodi bo vocpvoefe ovncfs pg tfttjpot pg uif sftqpoefs *)
          (!processSftqpoefs(qlT, tlB, tlC)) |
          (* Mbvodi bo vocpvoefe ovncfs pg tfttjpot pg uif tfswfs *)
          (!processT(tlT)) |
          (* Lfz sfhjtusbujpo process *)
	  (!processL)
        )


(* FYQFDUQW
SFTVMU not attacker(secretBOb[]) jt true.
SFTVMU not attacker(secretBOc[]) jt true.
SFTVMU not attacker(secretCOb[]) jt false.
SFTVMU not attacker(secretCOc[]) jt false.
SFTVMU inj-event(foeCparam(y,z)) ==> inj-event(cfhinCparam(y,z)) jt false.
SFTVMU (fwfo event(foeCparam(y,z)) ==> event(cfhinCparam(y,z)) jt false.)
SFTVMU inj-event(foeCgvmm(y1,y2,y3,y4,y5,y6)) ==> inj-event(cfhinCgvmm(y1,y2,y3,y4,y5,y6)) jt false.
SFTVMU (fwfo event(foeCgvmm(y1,y2,y3,y4,y5,y6)) ==> event(cfhinCgvmm(y1,y2,y3,y4,y5,y6)) jt false.)
SFTVMU inj-event(foeBparam(y,z)) ==> inj-event(cfhinBparam(y,z)) jt true.
SFTVMU inj-event(foeBgvmm(y1,y2,y3,y4,y5,y6)) ==> inj-event(cfhinBgvmm(y1,y2,y3,y4,y5,y6)) jt true.
0.166t (vtfs 0.158t + tztufn 0.008t), nby stt 12928L
FOE *)
