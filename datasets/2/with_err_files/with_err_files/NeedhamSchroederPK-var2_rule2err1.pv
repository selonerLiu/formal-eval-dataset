free c: channel.


type pkey.
type skey.

fun pk(skey): pkey.
reduc forall x: bitstring, y: skey; adec(aenc(x, pk(y)),y) = x.


type spkey.
type sskey.

fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall x: bitstring, y: sskey; getmess(sign(x,y)) = x.
reduc forall x: bitstring, y: sskey; checksign(sign(x,y), spk(y)) = x.


type nonce.

fun senc(bitstring,nonce): bitstring.
reduc forall x: bitstring, y: nonce; sdec(senc(x,y),y) = x.


fun nonce_to_bitstring(nonce): bitstring [data,typeConverter].


type host.
free A, B: host.


table keys(host, pkey).


event beginBparam(host).
event endBparam(host).
event beginAparam(host).
event endAparam(host).

query x: host; inj-event(endBparam(x)) ==> inj-event(beginBparam(x)).
query x: host; inj-event(endAparam(x)) ==> inj-event(beginAparam(x)).


free secretANa, secretANb, secretBNa, secretBNb: bitstring [private].

query attacker(secretANa);
      attacker(secretANb);
      attacker(secretBNa);
      attacker(secretBNb).


let processA(pkS: spkey, skA: skey) =
	in(c, hostX: host);
	event beginBparam(hostX); 		
	out(c, (A, hostX));                              
	in(c, ms: bitstring);                            
	let (pkX: pkey, =hostX) = checksign(ms, pkS) in
	new Na: nonce; 
	out(c, aenc((Na, A), pkX));                      
	in(c, m: bitstring);                             
	let (=Na, NX: nonce) = adec(m, skA) in
	out(c, aenc(nonce_to_bitstring(NX), pkX));       
	if hostX = B then
	event endAparam(A);
	out(c, senc(secretANa, Na));
	out(c, senc(secretANb, NX)).


let processB(pkS: spkey, skB: skey) =
	in(c, m: bitstring);                             
	let (NY: nonce, hostY: host) = adec(m, skB) in
	event beginAparam(hostY);
	out(c, (B, hostY));                              
	in(c,ms: bitstring);                             
	let (pkY: pkey,=hostY) = checksign(ms, pkS) in
	new Nb: nonce;
	out(c, aenc((NY, Nb), pkY));                     
	in(c, m3: bitstring);                            
	if nonce_to_bitstring(Nb) = adec(m3, skB) then
	if hostY = A then
	event endBparam(B);
	out(c, senc(secretBNa, NY));
	out(c, senc(secretBNb, Nb)).


let processS(skS: sskey) =  
	in(c,(a: host, b: host)); 
	get keys(=b, sb) in
	out(c,sign((sb,b), skS)).


let processK =
	in(c, (h: host, k: pkey));
	if h <> A && h <> B then insert keys(h,k).


process 
	new skA: skey; let pkA = pk(skA) in out(c, pkA); insert keys(A, pkA);
	new skB: skey; let pkB = pk(skB) in out(c, pkB); insert keys(B, pkB);
	new skS: sskey; let pkS = spk(skS) in out(c, pkS);
	( (!processA(pkS, skA)) | (!processB(pkS, skB)) | 
	  (!processS(skS)) | (!processK) )
