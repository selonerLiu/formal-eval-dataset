




free c: channel.

type host.
type nonce.



fun encrypt(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; decrypt(encrypt(x,y),y) = x.



not attacker(new Kas).
not attacker(new Kbs).



free A, B: host.


table keys(host, key).



free secretA, secretB: bitstring [private].
query attacker(secretA);
      attacker(secretB).

event endAparam(host,host).
event endBparam(host,host).
event beginAparam(host,host).
event beginBparam(host,host).
event endAkey(host, host, key).
event beginAkey(host, host, key).
event endBkey(host, host, key).
event beginBkey(host, host, key).

query x: host, y: host; inj-event(endAparam(x,y)) ==> inj-event(beginAparam(x,y)).
query x: host, y: host, z: key; inj-event(endAkey(x,y,z)) ==> inj-event(beginAkey(x,y,z)).
query x: host, y: host; inj-event(endBparam(x,y)) ==> inj-event(beginBparam(x,y)).
query x: host, y: host, z: key; inj-event(endBkey(x,y,z)) ==> inj-event(beginBkey(x,y,z)).



let processInitiator =
        
        in(c, (xA: host, xB0: host));
	if xA = A || xA = B then
	get keys(=xA, kA) in
	
	new Na: nonce;
	event beginBparam(xA, xB0);
        out(c, (xA, xB0, Na));
	in(c, m: bitstring);
	let (=Na, =xA, =xB0, k: key) = decrypt(m, kA) in
	event beginBkey(xA, xB0, k);
	
	if xB0 = A || xB0 = B then 
	event endAparam(xA, xB0);
        event endAkey(xA, xB0, k);
	out(c, encrypt(secretA, k)).




let processResponder =
        
        in(c, xB: host);
	if xB = A || xB = B then
	get keys(=xB, kB) in
	
	in(c, (xA1: host, =xB, m2: bitstring)); 
	event beginAparam(xA1, xB); 
	new Nb: nonce; 
	out(c, (xA1, xB, m2, Nb)); 
	in(c, (m3: bitstring, m4: bitstring)); 
	let (=Nb, =xA1, =xB, k: key) = decrypt(m4, kB) in 
	event beginAkey(xA1, xB, k); 
	out(c, m3);
	
	if xA1 = A || xA1 = B then
	event endBparam(xA1, xB);
	event endBkey(xA1, xB, k);
	out(c, encrypt(secretB, k)).



let processS = 
    	in(c, (xA1: host, xB1: host, Na1: nonce, Nb1: nonce));
    	get keys(=xA1, kA1) in
	get keys(=xB1, kB1) in
	new k: key;
        out(c, (encrypt((Na1, xA1, xB1, k), kA1), 
                encrypt((Nb1, xA1, xB1, k), kB1))).



let processK =
        in(c, (h: host, k: key));
        if h <> A && h <> B then insert keys(h,k).



process
	new Kas: key; new Kbs: key;
	insert keys(A, Kas);
	insert keys(B, Kbs);
	(
          
          (!processInitiator) | 
          
          (!processResponder) |
          
          (!processS) |
          
	  (!processK)
        )



