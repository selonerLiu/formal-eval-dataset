




free c: channel.

type key.
type host.
type nonce.



type sseed.
fun internal_encrypt(bitstring,key,sseed): bitstring.
reduc forall x: bitstring, y: key, r: sseed; decrypt(internal_encrypt(x,y,r),y) = x.
letfun encrypt(x: bitstring, y: key) = new r: sseed; internal_encrypt(x,y,r).



not attacker(new Kas).
not attacker(new Kbs).



free A, B: host.


table keys(host, key).



free secretA, secretB: bitstring [private].
noninterf secretA.
noninterf secretB.
noninterf secretA, secretB.



let processResponder =
        
        in(c, xB: host);
	if xB = A || xB = B then
	get keys(=xB, kB) in
	
	in(c, (C1: nonce, xA1: host, =xB, m2: bitstring));
	new Nb: nonce;
	out(c, (C1, xA1, xB, m2, encrypt((Nb, C1, xA1, xB), kB)));
	in(c, (=C1, m3: bitstring, m4: bitstring));
	let (=Nb, k: key) = decrypt(m4, kB) in
	out(c, (C1, m3));
	
	if xA1 = A || xA1 = B then
	out(c, encrypt(secretB, k)).



let processS = 
        in(c, (C1: nonce, xA1: host, xB1: host, m2: bitstring, m3: bitstring));
    	get keys(=xA1, kA1) in
	get keys(=xB1, kB1) in
	let (Na1: nonce, =C1, =xA1, =xB1) = decrypt(m2, kA1) in
	let (Nb1: nonce, =C1, =xA1, =xB1) = decrypt(m3, kB1) in
	new k: key;
        out(c, (C1, encrypt((Na1, k), kA1), 
                    encrypt((Nb1, k), kB1))).




let processK =
        in(c, (h: host, k: key));
        if h <> A && h <> B then insert keys(h,k).



process
	new Kas: key; new Kbs: key;
	insert keys(A, Kas);
	insert keys(B, Kbs);
	(
          
          (!processInitiator) | 
          
          (!processResponder) |
          
          (!processS) |
          
	  (!processK)
        )



