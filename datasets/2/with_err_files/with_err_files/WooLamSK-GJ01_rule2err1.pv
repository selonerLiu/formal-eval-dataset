




free c: channel.

type tag.
type host.
type nonce.
type key.



const m3: tag [data].
const m4: tag [data].
const m5: tag [data].



fun encrypt(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; decrypt(encrypt(x,y),y) = x.



not attacker(new Kas).
not attacker(new Kbs).



free A, B: host.


table keys(host, key).



event endBparam(host, host).
event beginBfull(host, host, nonce).
event endBfull(host, host, nonce).

query x: host, y: host; inj-event(endBparam(x,y)) ==> inj-event(beginBparam(x,y)).
query x: host, y: host, z: nonce; inj-event(endBfull(x,y,z)) ==> inj-event(beginBfull(x,y,z)).



let processInitiator =
        
        in(c, (xA: host, xB2: host));
	if xA = A || xA = B then
	get keys(=xA, kas) in
	
	event beginBparam(xA,xB2);
        out(c,xA);
	in(c,n: nonce); 
	event beginBfull(xA, xB2, n);
        out(c, encrypt((m3, n), kas)).



let processResponder =
        
        in(c, xB: host);
	if xB = A || xB = B then
	get keys(=xB, kbs) in
	
	in(c, xA2: host); 
	new N: nonce; 
	out(c, N); 
	in(c, m: bitstring);
        out(c, encrypt((m4, xA2, m), kbs));
        in(c, m2: bitstring);
	let (=m5, =N) = decrypt(m2, kbs) in
        
        if xA2 = A || xA2 = B then 
	event endBparam(xA2, xB);
	event endBfull(xA2, xB, N).



let processS =
	in(c, xB0: host);
	get keys(=xB0, kbs) in
	in(c,m: bitstring);
	let (=m4, xA1: host, m2: bitstring) = decrypt(m, kbs) in
	get keys(=xA1, kas) in
        let (=m3, n: nonce) = decrypt(m2, kas) in
        out(c, encrypt((m5, n), kbs)).



let processK =
        in(c, (h: host, k: key));
        if h <> A && h <> B then insert keys(h,k).



process
	new Kas: key; new Kbs: key;
	insert keys(A, Kas);
	insert keys(B, Kbs);
	(
          
          (!processInitiator) | 
          
          (!processResponder) |
          
          (!processS) |
          
	  (!processK)
        )



