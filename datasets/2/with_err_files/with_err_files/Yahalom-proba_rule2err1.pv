





set ignoreTypes = false.

free c: channel.

type key.
type host.
type nonce.

fun nonce_to_bitstring(nonce): bitstring [data,typeConverter].



type sseed.
fun internal_encrypt(bitstring,key,sseed): bitstring.
letfun encrypt(x: bitstring, y: key) = new r: sseed; internal_encrypt(x,y,r).



not attacker(new Kas).
not attacker(new Kbs).



free A, B: host.


table keys(host, key).



free secretA, secretB: bitstring [private].
noninterf secretA, secretB.
noninterf secretA.
noninterf secretB.



let processInitiator =
        
        in(c, xA: host);
	if xA = A || xA = B then
	get keys(=xA, kas) in
	
	new Na: nonce;
	out(c, (xA, Na));
	in(c, (cert1: bitstring, cert2: bitstring));
	let (b: host, k: key, =Na, nb: nonce) = decrypt(cert1, kas) in
	out(c, (cert2, encrypt(nonce_to_bitstring(nb), k)));
	
	if b = A || b = B then
	out(c, encrypt(secretA, k)).


                         
let processResponder =
        
        in(c, xB: host);
	if xB = A || xB = B then
	get keys(=xB, kbs) in
	
	in(c, (a: host, na: nonce));
	new Nb: nonce;
	out(c, (xB, encrypt((a, na, Nb), kbs)));
	in(c, (cert2: bitstring, m: bitstring));
	let (=a, k: key) = decrypt(cert2, kbs) in
	if nonce_to_bitstring(Nb) = decrypt(m, k) then
	
	if a = A || a = B then
	out(c, encrypt(secretB, k)).



let processS =
	in(c, (h2: host, m: bitstring));
	get keys(=h2, k2) in 
	let (h1: host, n1: nonce, n2: nonce) = decrypt(m, k2) in
	get keys(=h1, k1) in 
	new k: key;
	out(c, (encrypt((h2, k, n1, n2), k1), encrypt((h1, k), k2))).




let processK =
        in(c, (h: host, k: key));
        if h <> A && h <> B then insert keys(h,k).



process
	new Kas: key; new Kbs: key;
	insert keys(A, Kas);
	insert keys(B, Kbs);
	(
          
          (!processInitiator) | 
          
          (!processResponder) |
          
          (!processS) |
          
	  (!processK)
        )



