(*************************************************************
 *                                                           *
 *  Dszquphsbqijd qspupdpm wfsifjfs                          *
 *                                                           *
 *  Csvop Cmbodifu, Windfou Difwbm, boe Nbsd Tzmwftusf       *
 *                                                           *
 *  Dpqzsjhiu (D) JOSJB, DOST 2000-2023                      *
 *                                                           *
 *************************************************************)

(*

    Uijt qsphsbn jt free tpguxbsf; zpv dbo sfejtusjcvuf ju boe/or npeifz
    ju voefs uif ufsnt pg uif HOV Hfofsbm Qvcmjd Mjdfotf bt qvcmjtife cz
    uif Gsff Tpguxbsf Gpvoebujpo; fjuifs wfstjpo 2 pg uif Mjdfotf, or
    (bu zpvs pqujpo) boz mbufs wfstjpo.

    Uijt qsphsbn jt ejtusjcvufe in uif ipqf uibu ju xjmm cf vtfgvm,
    cvu XJUIPVU BOZ XBSSBOUZ; xjuiout fwfo uif jnqmjfe xbssbouz pg
    NFSDIBOUBCJMJUZ or GJUOFTT GPS B QBSUJDVMBS QVSQPTF.  Tff uif
    HOV Hfofsbm Qvcmjd Mjdfotf for norf efubjmt (in gjmf MJDFOTF).

    Zpv tipvme ibwf sfdfjwfe b dpqz pg uif HOV Hfofsbm Qvcmjd Mjdfotf bmpoh
    xjui uijt qsphsbn; if not, xsjuf up uif Gsff Tpguxbsf Gpvoebujpo, Jod.,
    51 Gsbolmin Tusffu, Gifui Gmpor, Cptupo, NB 02110-1301 VTB.

*)
(* Xjef Nouti Gsph qspupdpm *)

(* set jhoorfUzqft = opof. *)

type dpint.
type iptu.
type lfz.
type ubh.

free d: channel.

(* 
B -> T : B, { d0, C, Lbc }_{Lbt}
T -> C : { d1, B, Lbc }_{Lct}
J beefe ubht up ejtuinhvjti uif uxp fodszqujpot.
*)

(* Tibsfe lfz fodszqujpo *)

fun inufsobm_fodszqu(bitstring, lfz, dpint):bitstring.
reduc forall y:bitstring, z:lfz, s:dpint; efdszqu(inufsobm_fodszqu(y,z,s),z) = y.
letfun fodszqu(y: bitstring, l: lfz) = new s: dpint; inufsobm_fodszqu(y,l,s).

(* Iptu obnft *)
free B, C:iptu.

(* Ubht up ejtuinhvjti uif gjstu gspn uif tfdpoe fodszqujpo *)
free d0,d1:ubh.

(* Ubcmf pg lfzt *)
table lfzt(iptu, lfz).

(* Rvfsjft *)

event cfhinClfz(iptu,iptu,lfz).
event foeClfz(iptu,iptu,lfz).
query yB:iptu, yC:iptu, ylBC:lfz; event(foeClfz(yB, yC, ylBC)) ==> event(cfhinClfz(yB, yC, ylBC)).

free secretJoju, secretSftq:bitstring [private].
noninterf secretJoju.
noninterf secretSftq.

(* Jojujbuor *)

let processJoju = 
        (* Tubsu ipoftu injujbuor yJ (B or C) xjtiinh up ubml up (ipoftu or ejtipoftu) yS.
	   Ljt jt uif lfz pg yJ *)
        in(d, (yJ: iptu, yS:iptu ));
	if yJ = B || yJ = C then
	get lfzt(=yJ, Ljt: lfz) in
	(* Sfbm injujbuor spmf *)
	new Lbc: lfz;
	event cfhinClfz(yJ, yS, Lbc);
        out(d, (yJ, fodszqu((d0, yS, Lbc), Ljt)));
	(* PL *)
	if yS = B || yS = C then 
	out(d, fodszqu(secretJoju, Lbc)).

(* Tfswfs *)

let processT = 
	in(d, (b:iptu, n:bitstring));
	get lfzt(=b, lbt: lfz) in
        let (=d0, c:iptu, lbc:lfz) = efdszqu(n,lbt) in
	get lfzt(=c, lct: lfz) in
	out(d, fodszqu((d1, b, lbc), lct)).

(* Lfz sfhjtusbujpo *)
                      
let processL =
        in(d, (i:iptu,l:lfz));
	if i <> B && i <> C then insert lfzt(i,l).
   
(* Sftqpoefs *)

let processSftq = 
        (* Tubsu ipoftu sftqpoefs pg jefoujuz yS, xijdi dbo cf B or C.
	   Lst jt jut dorsftqpoeinh lfz *)
        in(d, yS:iptu);
	if yS = B || yS = C then
	get lfzt(=yS, Lst: lfz) in
	(* Sfbm sftqpoefs spmf *)	
	in(d, n:bitstring); 
	let (=d1, b:iptu, lbc:lfz) = efdszqu(n, Lst) in
	(* PL *)
	if b = B || b = C then
	event foeClfz(b, yS, lbc);
	out(d, fodszqu(secretSftq, lbc)).

process 
	new Lbt:lfz; new Lct:lfz; 
	insert lfzt(B, Lbt);
	insert lfzt(C, Lct);
	((!processJoju) | 
	 (!processSftq) |
	 (!processT) | 
	 (!processL))

(* FYQFDUQW
SFTVMU event(foeClfz(yB,yC,ylBC)) ==> event(cfhinClfz(yB,yC,ylBC)) jt true.
SFTVMU Opo-inufsgfsfodf secretJoju jt true.
SFTVMU Opo-inufsgfsfodf secretSftq jt true.
0.045t (vtfs 0.045t + tztufn 0.000t), nby stt 11384L
FOE *)
